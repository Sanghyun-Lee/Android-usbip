Addition by Arjan Mels on 2 Apr 2011:

Fixed various issues:
	- USB Mass Storage working under Vista & Win 7
	- Drivers accesible as normal user (eliminates need for elevation of client
                                                             apps in Vista & Win7)
	- Fixed handling of isochronous packets (mainly in linux driver, but 
	                                               one fix in windows driver here)
	- Fixed unplug handling
	- Fixed usb port reset handling
	- Adjusted code to allow compilation under and included project files for
	                                                           Visual Studio 2010 
	- Added CTRL-C Handling in client
	- Various smaller bugfixes/typos
	
Addition by Arjan Mels on 16 Feb 2011:

I modified the build script and code slightly to allow a x64 driver to compile.
I have tested this and it works.

x64 drivers for Vista & Windows 7 need to be signed with a special type of 
code signing certificate (kernel mode driver code signing certificate)
otherwise they will not operate. 
Workaround in a administrative command prompt enter: "bcdedit /set testsigning on"
Now all drivers will be accepted: THIS IS A SECURITY RISK

I will try to get a version signed by the people of ReactOS 
(http://reactos.org/wiki/Driver_Signing)


Original by Lepton Wu:

Because I haven't implemented all the interfaces that a windows usb bus
driver should provided, and perhaps some bug in my code, so some devices 
won't work now. 

Because I don't know enough about PNP management in windows, one big problem 
is that "stop  device"  is buggy now.

USB devices I have tested ok for me:

one usb mouse
two usb flash disk
(one disk only work with user space usbipd daemon, it need reset device function)
two hid device compatible usb token key
one dlink DWL-G122 usb wireless card
usb camera on asus eeepc 701 model
one usb microphone (only work with user space usbipd daemon)
one usb sound card (only work with user space usbipd daemon)
one usb webcam (only work with user space  usbipd daemon)
one usb TVBOX (it will display one or two screensoft and freeze, I don't know why,
perhaps because the iso transfer is not so iso...)
one bluetooth dongle (just test file transfter from my phone)

To build userspace usbip tool:

On a linux host:

1. install mingw32

For debian based linux distribution, run like this;

apt-get install mingw32

2. run "make" in this directory


To build kernel driver:

On a windows host:

1. install windows DDK
  
   I download version 6001.18002 from MSDN site. I think the other
version perhaps will be ok too.

2. enter windows xp build env, and run b.bat in this directroy to
build and install the kernel driver. 

   you need devcon (from windows DDK sample) to install it.

To test:

You'd better test the kernel driver in a virtual windows guest. Then
it won't crash your pc when this stuff BSOD.

To show the exported usb device from linux
c:\wxp>usbip -l xxx.xxx.xxx.xxx 
To attach it
c:\wxp>usbip -a xxx.xxx.xxx.xxx x-x to use it.
To detach it (open another cmd window)
c:\wxp>usbip -d 1

About LICENSE:

I'd like to release these code under GPL,
but since the kernel driver is started from a ddk sample (toaster sample),
there is some MS license stuff at the beginning of every driver file.

But I think I will change/rewrite the driver codes heavyly and at last I will
make the driver compiled with mingw32, then I will delete all of the MS license 
stuff.

Any question, pleas contact me with address Lepton Wu <ytht.net@gmail.com>
